// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum role_user {
  superadmin
  customer
}

model User {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  email    String    @db.VarChar(255)
  password String    @db.VarChar(255)
  role     role_user @default(customer)

  orders  Order[] // relasi 1:m => 1 user punya banyak order
  session Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Brand {
  id   Int    @id @default(autoincrement())
  logo String @db.VarChar(255)
  name String @db.VarChar(255)

  products Product[] // relasi 1:M

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  product Product[] // relasi 1:M

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  product Product[] // relasi 1:M

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum stock_product {
  ready
  preorder
}

model Product {
  id          Int           @id @default(autoincrement())
  brand_id    Int
  brand       Brand         @relation(fields: [brand_id], references: [id])
  category_id Int
  category    Category      @relation(fields: [category_id], references: [id])
  location_id Int
  location    Location      @relation(fields: [location_id], references: [id])
  name        String        @db.VarChar(255)
  description String        @db.Text
  price       BigInt        @db.BigInt
  stock       stock_product
  images      String[]

  OrderProduct OrderProduct[] // relasi 1:m => 1 product punya banyak order products

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum status_orders {
  pending
  success
  failed
}

model Order {
  id      Int           @id @default(autoincrement())
  code    String        @unique @db.Text
  user_id Int
  user    User          @relation(fields: [user_id], references: [id])
  total   BigInt        @db.BigInt
  status  status_orders

  OrderDetail  OrderDetail? // relasi 1:1 => 1 order punya 1 order detail
  OrderProduct OrderProduct[] // relasi 1:m => 1 order punya banyak order product

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderDetail {
  id          Int    @id @default(autoincrement())
  order_id    Int    @unique
  order       Order  @relation(fields: [order_id], references: [id])
  name        String @db.VarChar(255)
  phone       String @db.VarChar(15)
  address     String @db.VarChar(255)
  city        String @db.VarChar(255)
  postal_code String @db.VarChar(255)
  notes       String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
  order_id   Int
  order      Order   @relation(fields: [order_id], references: [id])
  subtotal   Int
  quantity   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
